{"version":3,"sources":["main.js"],"names":["add","a","b","subtract","_pipe","f","g","flow","fns","reduce","partial","fn","firstArg","lastArgs","querySelector","query","document","getStyle","container","window","getComputedStyle","currentStyle","getSingleStyle","type","classListModify","body","classList","setWidth","width","style","getPlainValue","itemStyle","parseInt","handleDisplay","show","submitForm","generateWidth","hide","submitContainer","containerStyle","formStyle","calcTotal","observeHandler","entries","docBody","isIntersecting","paddingRight","paddingLeft","widthPlain","padding","total","autoFixContainerWidth","resizer","addEventListener","clearTimeout","setTimeout","init","IntersectionObserver","observe"],"mappings":";AAAA,IAAMA,EAAM,SAACC,EAAGC,GAAMD,OAAAA,EAAIC,GACpBC,EAAW,SAACF,EAAGC,GAAMD,OAAAA,EAAIC,GACzBE,EAAQ,SAACC,EAAGC,GAAM,OAAA,WAAaA,OAAAA,EAAED,EAAA,WAAD,EAAA,cAChCE,EAAO,WAAIC,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAJ,IAAA,MAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAAIA,EAAJ,GAAA,UAAA,GAAYA,OAAAA,EAAIC,OAAOL,IAC9BM,EAAU,SAACC,EAAIC,GAAuB,OAAA,WAAIC,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAa,IAAA,MAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAAbA,EAAa,GAAA,UAAA,GAAYF,OAAAA,EAAA,WAAGC,EAAAA,CAAAA,GAAaC,OAAAA,MAOnFC,EAAgB,SAAAC,GAASC,OAAAA,SAASF,cAAcC,IAMhDE,EAAW,SAAAC,GAAaC,OAAAA,OAAOC,iBAAmBA,iBAAiBF,EAAW,MAAQA,EAAUG,cAOhGC,EAAiB,SAACJ,EAAWK,GAASN,OAAAA,EAASC,GAAWK,IAO1DC,EAAkB,SAACC,EAAMF,GAC7BE,EAAKC,UAAUH,GAAM,eAQjBI,EAAW,SAACT,EAAWU,GAC3BV,EAAUW,MAAMD,MAAQA,GAOpBE,EAAgB,SAAAC,GAAaxB,OAAAA,EACjCwB,EACAC,WAUIC,EAAgB,SAACR,EAAMP,EAAWK,EAAMK,GAC5CJ,EAAgBC,EAAMF,GACtBI,EAAST,EAAWU,IAShBM,EAAO,SAACT,EAAMP,EAAWiB,GACvBP,IAAAA,EAAQQ,EAAclB,EAAWiB,GACvCF,EAAcR,EAAMP,EAAW,MAAOU,IAQlCS,EAAO,SAACZ,EAAMP,GAAce,OAAAA,EAAcR,EAAMP,EAAW,SAAU,KAOrEkB,EAAgB,SAACE,EAAiBH,GAChCI,IAAAA,EAAiB7B,EAAQY,EAAgBgB,GACzCE,EAAY9B,EAAQY,EAAgBa,GACnCM,OAAAA,EAAUF,EAAgBC,GAAa,MAU1CE,EAAiB,SAACC,EAASC,EAASN,EAAiBH,GAAe,OAAEQ,EAAQ,GAAGE,eAEjFR,EAAKO,EAASN,GADdJ,EAAKU,EAASN,EAAiBH,IAQ/BM,EAAY,SAACF,EAAgBC,GAC3BM,IAAAA,EAAehB,EAAcS,EAAdT,CAA8B,gBAC7CiB,EAAcjB,EAAcS,EAAdT,CAA8B,eAC5CkB,EAAalB,EAAcU,EAAdV,CAAyB,SACtCmB,EAAUjD,EAAI8C,EAAcC,GAG3BG,OAFO/C,EAAS6C,EAAYC,IAU/BE,EAAwB,SAACb,EAAiBH,GAC1CiB,IAAAA,EACJjC,OAAOkC,iBAAiB,SAAU,WAChCC,aAAaF,GACbA,EAAUG,WAAW,WACb3B,IAAAA,EAAQQ,EAAcE,EAAiBH,GAC7CR,EAASW,EAAiBV,IACzB,QAOD4B,EAAO,WACLrB,IAAAA,EAAarB,EAAc,uBAC3BwB,EAAkBxB,EAAc,wBAChC8B,EAAU5B,SAASS,KAER,IAAIN,OAAOsC,qBAAqB,SAAAd,GAAWD,OAAAA,EAAeC,EAASC,EAASN,EAAiBH,KACrGuB,QAAQvB,EAAY,KAE7BgB,EAAsBb,EAAiBH,IAIzCnB,SAASqC,iBAAiB,mBAAoB,WAAMG,OAAAA","file":"main.js","sourceRoot":"../src","sourcesContent":["const add = (a, b) => a + b\nconst subtract = (a, b) => a - b\nconst _pipe = (f, g) => (...args) => g(f(...args))\nconst flow = (...fns) => fns.reduce(_pipe)\nconst partial = (fn, firstArg) => {  return (...lastArgs) => {    return fn(firstArg, ...lastArgs);  }}\n\n/**\n * Short hand for native querySelector\n * @param {String} query\n * @returns {HTMLElement}\n */\nconst querySelector = query => document.querySelector(query)\n\n/**\n * shortcut o get leaner the computed styles of an element\n * @param {HTMLDivElement} container\n */\nconst getStyle = container => window.getComputedStyle ? getComputedStyle(container, null) : container.currentStyle\n\n/**\n * get an single computed style from an item\n * @param {HTMLDivElement} container\n * @param {String} type\n */\nconst getSingleStyle = (container, type) => getStyle(container)[type]\n\n/**\n * Shorthand to set the sticky class\n * @param {HTMLBodyElement} body\n * @param {String} type\n */\nconst classListModify = (body, type) => {\n  body.classList[type]('stickySave')\n}\n\n/**\n * set the width to an given element\n * @param {HTMLDivElement} container\n * @param {String} width\n */\nconst setWidth = (container, width) => {\n  container.style.width = width\n}\n\n/**\n *\n * @param {*} itemStyle\n */\nconst getPlainValue = itemStyle => flow(\n  itemStyle,\n  parseInt\n)\n\n/**\n *\n * @param {*} body\n * @param {*} container\n * @param {*} type\n * @param {*} width\n */\nconst handleDisplay = (body, container, type, width) => {\n  classListModify(body, type)\n  setWidth(container, width)\n}\n\n/**\n * show the sticky bar\n * @param {*} body\n * @param {*} container\n * @param {*} submitForm\n */\nconst show = (body, container, submitForm) => {\n  const width = generateWidth(container, submitForm)\n  handleDisplay(body, container, 'add', width)\n}\n\n/**\n * reset to default\n * @param {*} body\n * @param {*} container\n */\nconst hide = (body, container) => handleDisplay(body, container, 'remove', '')\n\n/**\n * generate the real inner width with px suffix\n * @param {HTMLDivElement} submitContainer\n * @param {HTMLDivElement} submitForm\n */\nconst generateWidth = (submitContainer, submitForm) => {\n  const containerStyle = partial(getSingleStyle, submitContainer)\n  const formStyle = partial(getSingleStyle, submitForm)\n  return calcTotal(containerStyle, formStyle) + 'px'\n}\n\n/**\n * handles the intersection observer\n * @param {Array} entries\n * @param {HTMLBodyElement} docBody\n * @param {HTMLDivElement} submitContainer\n * @param {HTMLDivElement} submitForm\n */\nconst observeHandler = (entries, docBody, submitContainer, submitForm) => !(entries[0].isIntersecting)\n    ? show(docBody, submitContainer, submitForm)\n    : hide(docBody, submitContainer)\n\n/**\n * calculates the required inner width\n * @param {HTMLDivElement} containerStyle\n * @param {HTMLDivElement} formStyle\n */\nconst calcTotal = (containerStyle, formStyle) => {\n  const paddingRight = getPlainValue(containerStyle)('paddingRight')\n  const paddingLeft = getPlainValue(containerStyle)('paddingLeft')\n  const widthPlain = getPlainValue(formStyle)('width')\n  const padding = add(paddingRight, paddingLeft)\n  const total = subtract(widthPlain, padding)\n\n  return total\n}\n\n/**\n * Resize observer to update width on window resize\n * @param {HTMLDivElement} submitContainer\n * @param {HTMLDivElement} submitForm\n */\nconst autoFixContainerWidth = (submitContainer, submitForm) => {\n  var resizer;\n  window.addEventListener('resize', () => {\n    clearTimeout(resizer)\n    resizer = setTimeout(() => {\n      const width = generateWidth(submitContainer, submitForm)\n      setWidth(submitContainer, width)\n    }, 100)\n  })\n}\n\n/**\n * invoke the sticky backend footer\n */\nconst init = () => {\n  const submitForm = querySelector('.tl_formbody_submit')\n  const submitContainer = querySelector('.tl_submit_container')\n  const docBody = document.body\n\n  const observer = new window.IntersectionObserver(entries => observeHandler(entries, docBody, submitContainer, submitForm))\n  observer.observe(submitForm, 500)\n\n  autoFixContainerWidth(submitContainer, submitForm)\n}\n\n/** wait unitil the dom is loaded to get the needed elements */\ndocument.addEventListener(\"DOMContentLoaded\", () => init())\n"]}